Given strings S and T, find the minimum (contiguous) substring W of S, so that T is a subsequence of W.
If there is no such window in S that covers all characters in T, return the empty string "". If there are multiple such minimum-length windows, return the one with the left-most starting index.
Example 1:
Input: 
S = "abcdebdde", T = "bde"
Output: "bcde"
Explanation: 
"bcde" is the answer because it occurs before "bdde" which has the same length.
"deb" is not a smaller window because the elements of T in the window must occur in order.

Note:
All the strings in the input will only contain lowercase letters.
The length of S will be in the range [1, 20000].
The length of T will be in the range [1, 100]

website: https://dotnetfiddle.net/

using System;

public class Program
{    
	public static string MinWindow(string S, string T){
		int[,] dp = new int[S.Length, T.Length];
		dp[0,0] = (S[0] == T[0])? 0: -1;
		for(int i = 1;i<T.Length;i++)dp[0,i] = -1;
		for(int i = 1; i<S.Length;i++){
			if(S[i] == T[0]){
				dp[i,0] = i;
			}else {
				dp[i, 0] = dp[i - 1, 0];	
			}
		}
		int min = Int32.MaxValue;
		string res = "";
		for(int i = 1; i<S.Length;i++){
			for(int j = 1; j<T.Length;j++){
				if(S[i] == T[j]){
					dp[i,j] = dp[i - 1, j - 1];	
				}else {
					dp[i, j] = dp[i - 1, j];	
				}
			}
			if(dp[i, T.Length - 1] != -1) {
				int distance = i - dp[i, T.Length - 1] + 1;
				if(min > distance){
					min = distance;
					res = S.Substring(dp[i,T.Length - 1], min);
				}	
			}
		}
		return res;
	}
	public static void Main()
	{
		Console.WriteLine(MinWindow("abcdebdde","bde"));
	}
}
