#: this problem probably needs an update for a better solution.

Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).

[Picture:https://www.cnblogs.com/yrbbest/p/5058571.html]
Range Sum Query 2D
The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.

Example:

Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -> 8
update(3, 2, 2)
sumRegion(2, 1, 4, 3) -> 10
 

Note:

The matrix is only modifiable by the update function.
You may assume the number of calls to update and sumRegion function is distributed evenly.
You may assume that row1 ≤ row2 and col1 ≤ col2.

Website: https://dotnetfiddle.net/

using System;
public class Program
{
	public class NumMatrix {
		private int[,] array;
		private int rows,columns;
		public NumMatrix(int[][] matrix) {
			if(matrix.Length<1||matrix[0].Length<1)return;
			rows = matrix.Length;
			columns = matrix[0].Length;
			array = new int[rows,columns];
			for(int i = 0;i<rows;i++)
				for(int j = 0;j<columns;j++)
					array[i,j] = matrix[i][j];
		}
		public void Update(int i,int j,int val){
		  array[i,j] = val;
		}
		public int SumRegion(int row1, int col1, int row2, int col2) {
			int sum = 0;
			for(int i = row1;i<=row2;i++)
				for(int j = col1;j<=col2;j++)
					sum += array[i,j];
			return sum;
		}
	}
	public static void Main()
	{
		NumMatrix test = new NumMatrix(new int[2][]{new int[2]{1,2},new int[2]{1,2}});
		Console.WriteLine(test.SumRegion(0,0,1,1));
	}
}
